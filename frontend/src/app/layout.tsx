import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { AuthProvider } from "./components/AuthContext";
import { cookies } from "next/headers";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  let isLoggedIn = false;
  let user = null;

  try {
    const cookieStore = await cookies();
    const accessToken = cookieStore.get("accessToken");
    isLoggedIn = !!accessToken;

    if (isLoggedIn) {
      try {
        const baseUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8080";
        const res = await fetch(`${baseUrl}/api/member`, {
          headers: { Cookie: `accessToken=${accessToken?.value}` },
          credentials: "include",
          cache: "no-store",
        });
        if (res.ok) {
          const data = await res.json();
          user = data.data;
        }
      } catch (error) {
        console.log("내부 fetch 오류:", error); // 내부 try-catch 에러 출력
        user = null;
      }
    }
  } catch (error) {
    // cookies() 함수가 실패할 경우 기본값 사용
    console.log("cookies() 호출 오류:", error); // 여기에서 오류 로그
    isLoggedIn = false;
    user = null;
  }

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <AuthProvider isLoggedIn={isLoggedIn} user={user}>
          {children}
        </AuthProvider>
      </body>
    </html>
  );
}
